#Riya Dosanjh, Aditi Patel, Kate MacDonald, Rukia Beduni
"""Pacman, classic arcade game.

Exercises

1. Change the board.
2. Change the number of ghosts.
3. Change where pacman starts.
4. Make the ghosts faster/slower.
5. Make the ghosts smarter.
""" 

from random import choice #Function responsible for choosing a random element from a list. This helps randomize the ghosts directions. #RB
from turtle import * #a python library responsible of creating the graphics and animations using a turtle like animation.This helps create the path and enviroment of the game. # RB

from freegames import floor, vector #

state = {'score': 0} 
path = Turtle(visible=False)
writer = Turtle(visible=False)
aim = vector(5, 0) 
pacman = vector(-40, -80)#dimensions for the packman, interms of the grid. RB
ghosts = [
    [vector(-180, 160), vector(5, 0)],
    [vector(-180, -160), vector(0, 5)],
    [vector(100, 160), vector(0, -5)],
    [vector(100, -160), vector(-5, 0)],
] #dimensions for the ghost, interms of the grid. RB
# fmt: off
tiles = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
] #this part of the code lays out the map of the game. The 0's represents the areas pacman can't pass through, such as the walls or empty spaces. While the 1's represent the areas pacman can pass through, these areas contain the dots which packman eats. RB
# fmt: on


def square(x, y): #this function creates the squares that make up the grid, made up of x and y parameters. RB
    """Draw square using path at (x, y)."""
    path.up() #to draw the squares, it's drawn in a upward direction. RB
    path.goto(x, y) # the squares is drawn by the the specific x and y coordinates. RB
    path.down() #the squares are drawn in a downward direction. RB
    path.begin_fill() #starts the begining of a new path. RB

    for count in range(4): #this for loop is run for a range four times to create the squares/paths. RB 
        path.forward(20) #moves forward 20 times 
        path.left(90) #turns to the left 90 degrees. RB

    path.end_fill() #this ends the loops and creats the squares/paths filled with colour. RB


def offset(point): #calculates the index of a specific point on a grid using the tiles data structure. AP
    """Return offset of point in tiles."""
    x = (floor(point.x, 20) + 200) / 20 #Computes the horizontal grid index for the point. AP
    y = (180 - floor(point.y, 20)) / 20 #Computes the vertical grid index for the point. AP
    index = int(x + y * 20) #Converts the tile grid coordinates into a 1D index for array access. AP 
    return index #Returns the calculated index. AP


def valid(point):  #Checks whether a given point is valid for movement in the tiles grid. AP
    """Return True if point is valid in tiles."""
    index = offset(point) #Calculates the tile index for the given point using the offset function. AP

    if tiles[index] == 0: #Returns False if the tile at the calculated index is 0, which indicates an invalid or blocked area. AP
        return False

    index = offset(point + 19) #Rechecks validity for an offset point by adding 19. AP

    if tiles[index] == 0: #Returns False if the adjusted tile is invalid. AP
        return False

    return point.x % 20 == 0 or point.y % 20 == 0 #Validates that the point lies on a grid boundary which is aligned to a multiple of 20. AP


def world(): #This function draws the game world based on the tiles grid. AP
    """Draw world using path."""
    bgcolor('black') #Sets the background color to black. AP
    path.color('blue') #Sets the drawing tool color to blue. AP

    for index in range(len(tiles)): #Loops through each tile in the tiles grid and retrieves its value. AP
        tile = tiles[index]

        if tile > 0: #If the tile value is greater than 0, it calculates its screen coordinates. AP
            x = (index % 20) * 20 - 200 #Determines the column coordinates. AP
            y = 180 - (index // 20) * 20 #Determines the row coordinates. AP
            square(x, y) #Draws a square at the calculated coordinates. AP

            if tile == 1: #If the tile value is 1, it draws a small white dot at the center of the square. AP
                path.up()
                path.goto(x + 10, y + 10)
                path.dot(2, 'white')


def move(): #Handles movement logic for Pac-Man and ghosts in the game. AP
    """Move pacman and all ghosts."""
    writer.undo() #Updates the game's score display removing the previous score. AP
    writer.write(state['score']) #Updates the game's score display by writing the current one. AP


    clear() #Clears the screen before redrawing the updated game state. AP

    if valid(pacman + aim): #Checks if moving Pac-Man in the direction of aim results in a valid position. If True, moves Pac-Man accordingly. AP
        pacman.move(aim)

    def move():
    """Move pacman and all ghosts."""
    writer.undo()# Undoes the previously displayed score to refresh it for the new score.KM
    writer.write(state['score'])# Displays the current score.KM

    clear() # Erases the last frame on the screen to prepare for the next one.KM

    if valid(pacman + aim):
        pacman.move(aim) # If the next move of pacman is valid (doesnt hit an obstacle or go out of bounds) pacman moves in the direction of the 'aim'.KM

    index = offset(pacman) # Gets the index of the tile that pacman is currently on.KM

    if tiles[index] == 1:
        tiles[index] = 2 # If pacman is on a tile that has a pellet represented by a '1' change it to be a '2' to signify the pellet has been eaten.KM
        state['score'] += 1 # Increase the score due to the eaten pellet.KM
        x = (index % 20) * 20 - 200
        y = 180 - (index // 20) * 20 # Calculates the x and y coordinates for the tile where the pellet was eaten, these coordinates are adjusted based off the index to place the square.KM
        square(x, y) # Puts a small square on the tile whre pacman just ate the pellet.KM

    up() # Goes to pacmans current position and draws the dot representing him.KM
    goto(pacman.x + 10, pacman.y + 10) # Moves to pacmans current position a little but offset.KM
    dot(20, 'yellow') # Draws a size 20 yellow dot representing pacman.KM

    for point, course in ghosts:
        if valid(point + course): # If the ghosts next move is valid it moves.KM
            point.move(course)
        else: # If the ghosts next move is not valid, it randomly chooses one of the options below.KM
            options = [
                vector(5, 0), # Move right.KM
                vector(-5, 0), # Move left.KM
                vector(0, 5), # Move up.KM
                vector(0, -5), # Move down.KM
            ]
             plan = choice(options) # Chooses one of the direction options.KM
            course.x = plan.x
            course.y = plan.y

        up() # Moves to the ghosts location on screen to draw it.KM
        goto(point.x + 10, point.y + 10) # Moves the ghosts position with a little offset.KM
        dot(20, 'red') # Draws a red dot (the ghost).KM

    update() # Updates the screen to show the latest positions of the ghosts and pacman.KM

    for point, course in ghosts: # Checking is pacman has collided with a ghost.KM
        if abs(pacman - point) < 20:
            return # If pacman is detected less that 20 units from a ghost end the game or stop movement assuming its fatal.KM

    ontimer(move, 100) # Sets up a time to call the 'move' function after 100 milliseconds.KM



def change(x, y): #This function is responsible for the movement of Pacman RD
    """Change pacman aim if valid.""" #Docstring RD
    if valid(pacman + vector(x, y)): #Accounts for change in current position RD
        aim.x = x #Horizontal change RD
        aim.y = y #Vertical change RD


setup(420, 420, 370, 0) #This sets up the parameters of the game window RD
hideturtle() #Hides the turtle cursor which is used to draw things like Walls RD
tracer(False) #Turns off automatic screen updates RD
writer.goto(160, 160) #Moves the turtle cursor to a new position RD
writer.color('white') #Makes the text white RD
writer.write(state['score']) #Displays the score on the screen RD
listen() #Allows for keyboard input to be taken in so that the following codes can work RD
onkey(lambda: change(5, 0), 'Right') #Pacman moves right when right arrow is pressed RD
onkey(lambda: change(-5, 0), 'Left') #Pacman moves left when left arrow is pressed RD
onkey(lambda: change(0, 5), 'Up') #Pacman moves up when up arrow is pressed RD
onkey(lambda: change(0, -5), 'Down') #Pacman moves down when down arrow is pressed RD
world() #Sets up all the factors of the world game such as the ghosts and path RD
move() #Allows for movement to occur RD
done() #Ends the game RD
