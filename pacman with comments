"""Pacman, classic arcade game.

Exercises

1. Change the board.
2. Change the number of ghosts.
3. Change where pacman starts.
4. Make the ghosts faster/slower.
5. Make the ghosts smarter.
""" 

from random import choice #Function responsible for choosing a random element from a list. This helps randomize the ghosts directions. #RB
from turtle import * #a python library responsible of creating the graphics and animations using a turtle like animation.This helps create the path and enviroment of the game. # RB

from freegames import floor, vector #

state = {'score': 0} 
path = Turtle(visible=False)
writer = Turtle(visible=False)
aim = vector(5, 0) 
pacman = vector(-40, -80)#dimensions for the packman, interms of the grid. RB
ghosts = [
    [vector(-180, 160), vector(5, 0)],
    [vector(-180, -160), vector(0, 5)],
    [vector(100, 160), vector(0, -5)],
    [vector(100, -160), vector(-5, 0)],
] #dimensions for the ghost, interms of the grid. RB
# fmt: off
tiles = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
] #this part of the code lays out the map of the game. The 0's represents the areas pacman can't pass through, such as the walls or empty spaces. While the 1's represent the areas pacman can pass through, these areas contain the dots which packman eats. RB
# fmt: on


def square(x, y): #this function creates the squares that make up the grid, made up of x and y parameters. RB
    """Draw square using path at (x, y)."""
    path.up() #to draw the squares, it's drawn in a upward direction. RB
    path.goto(x, y) # the squares is drawn by the the specific x and y coordinates. RB
    path.down() #the squares are drawn in a downward direction. RB
    path.begin_fill() #starts the begining of a new path. RB

    for count in range(4): #this for loop is run for a range four times to create the squares/paths. RB 
        path.forward(20) #moves forward 20 times 
        path.left(90) #turns to the left 90 degrees. RB

    path.end_fill() #this ends the loops and creats the squares/paths filled with colour. RB


def offset(point):
    """Return offset of point in tiles."""
    x = (floor(point.x, 20) + 200) / 20
    y = (180 - floor(point.y, 20)) / 20
    index = int(x + y * 20)
    return index


def valid(point):
    """Return True if point is valid in tiles."""
    index = offset(point)

    if tiles[index] == 0:
        return False

    index = offset(point + 19)

    if tiles[index] == 0:
        return False

    return point.x % 20 == 0 or point.y % 20 == 0


def world():
    """Draw world using path."""
    bgcolor('black')
    path.color('blue')

    for index in range(len(tiles)):
        tile = tiles[index]

        if tile > 0:
            x = (index % 20) * 20 - 200
            y = 180 - (index // 20) * 20
            square(x, y)

            if tile == 1:
                path.up()
                path.goto(x + 10, y + 10)
                path.dot(2, 'white')


def move():
    """Move pacman and all ghosts."""
    writer.undo()
    writer.write(state['score'])

    clear()

    if valid(pacman + aim):
        pacman.move(aim)

    index = offset(pacman)

    if tiles[index] == 1:
        tiles[index] = 2
        state['score'] += 1
        x = (index % 20) * 20 - 200
        y = 180 - (index // 20) * 20
        square(x, y)

    up()
    goto(pacman.x + 10, pacman.y + 10)
    dot(20, 'yellow')

    for point, course in ghosts:
        if valid(point + course):
            point.move(course)
        else:
            options = [
                vector(5, 0),
                vector(-5, 0),
                vector(0, 5),
                vector(0, -5),
            ]
            plan = choice(options)
            course.x = plan.x
            course.y = plan.y

        up()
        goto(point.x + 10, point.y + 10)
        dot(20, 'red')

    update()

    for point, course in ghosts:
        if abs(pacman - point) < 20:
            return

    ontimer(move, 100)


def change(x, y): #This function is responsible for the movement of Pacman RD
    """Change pacman aim if valid.""" #Docstring RD
    if valid(pacman + vector(x, y)): #Accounts for change in current position RD
        aim.x = x #Horizontal change RD
        aim.y = y #Vertical change RD


setup(420, 420, 370, 0) #This sets up the parameters of the game window RD
hideturtle() #Hides the turtle cursor which is used to draw things like Walls RD
tracer(False) #Turns off automatic screen updates RD
writer.goto(160, 160) #Moves the turtle cursor to a new position RD
writer.color('white') #Makes the text white RD
writer.write(state['score']) #Displays the score on the screen RD
listen() #Allows for keyboard input to be taken in so that the following codes can work RD
onkey(lambda: change(5, 0), 'Right') #Pacman moves right when right arrow is pressed RD
onkey(lambda: change(-5, 0), 'Left') #Pacman moves left when left arrow is pressed RD
onkey(lambda: change(0, 5), 'Up') #Pacman moves up when up arrow is pressed RD
onkey(lambda: change(0, -5), 'Down') #Pacman moves down when down arrow is pressed RD
world() #Sets up all the factors of the world game such as the ghosts and path RD
move() #Allows for movement to occur RD
done() #Ends the game RD
